{"version":3,"sources":["components/delete-confirmation-modal/confirmation-delete.js","components/todo-list-item-movements/todo-list-item-movements.js","components/todo-list-item/todo-list-item.js","components/app/App.js","serviceWorker.js","index.js"],"names":["ConfirmationDelete","deleteButtonClick","props","onSuccess","cancelButtonClick","onCancel","this","name","Modal","isOpen","Boolean","toggle","ModalHeader","ModalBody","ModalFooter","Button","color","onClick","Component","TodoListItemMovements","item","todoListItemUp","todoListItemDown","className","disabled","isDisabledUp","type","isDisabledDown","TodoListItem","remove","key","id","App","state","list","todo","confirmCounter","addTodo","console","log","setState","prev","slice","length","Math","floor","random","inputTodoChange","e","target","value","confirmRemove","removeConfirmedListItem","newList","filter","el","confirmRemoveCancel","idx","findIndex","len","onChange","placeholder","map","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.585e5c1f.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {Button, Modal, ModalHeader, ModalBody, ModalFooter} from 'reactstrap';\r\n\r\nexport default class ConfirmationDelete extends Component {\r\n\r\n    deleteButtonClick = () => {\r\n        this.props.onSuccess();\r\n    };\r\n\r\n    cancelButtonClick = () => {\r\n        this.props.onCancel();\r\n    };\r\n\r\n    render() {\r\n        const {name, onCancel} = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <Modal isOpen={Boolean(name)} toggle={onCancel}>\r\n                    <ModalHeader>Delete confirmation</ModalHeader>\r\n                    <ModalBody>\r\n                        The <strong>{name}</strong> task will be deleted\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button color=\"danger\"\r\n                                onClick={this.deleteButtonClick}\r\n                        >Delete</Button>{' '}\r\n                        <Button color=\"secondary\"\r\n                                onClick={this.cancelButtonClick}\r\n                        >Cancel</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\n\r\nconst TodoListItemMovements = ({item, todoListItemUp, todoListItemDown}) => {\r\n\r\n    return (\r\n        <div className=\"btn-group-vertical\">\r\n            <button onClick={() => {todoListItemUp(item)}}\r\n                    disabled={item.isDisabledUp}\r\n                    type=\"button\" className='btn btn-primary btn-sm mb-1 align-content-center'>Up\r\n            </button>\r\n            <button\r\n                onClick={() => {todoListItemDown(item)}}\r\n                disabled={item.isDisabledDown}\r\n                type=\"button\" className='btn  btn-dark btn-sm mb-1 align-content-center align'>Down</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoListItemMovements;\r\n","import React from \"react\";\r\nimport TodoListItemMovements from \"../todo-list-item-movements/todo-list-item-movements\";\r\n\r\nconst TodoListItem = ({item, remove, todoListItemUp, todoListItemDown}) => {\r\n\r\n    return (\r\n            <li key={item.id} className='list-group-item'>\r\n                <TodoListItemMovements item = {item} todoListItemUp={todoListItemUp} todoListItemDown={todoListItemDown}/>\r\n                {item.name}\r\n                <button type=\"button\" className='btn btn-danger btn-sm' onClick={() => {remove(item)}}>Delete</button>\r\n            </li>\r\n    );\r\n};\r\n\r\nexport default TodoListItem;\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport ConfirmationDelete from \"../delete-confirmation-modal/confirmation-delete\";\r\nimport TodoListItem from \"../todo-list-item/todo-list-item\";\r\n\r\nclass App extends Component {\r\n    //lifecycle methods\r\n//0.\r\n//     constructor() {\r\n//         super();\r\n//         this.state = {count: 4, counterName: \"First\"};\r\n//         console.log('constructor');\r\n//     }\r\n\r\n    state = {\r\n        list: [\r\n            { id: 1, name: '1st todo', isDisabledUp: true, isDisabledDown: false },\r\n            { id: 2, name: '2d todo', isDisabledUp: false, isDisabledDown: false },\r\n            { id: 3, name: '3d todo', isDisabledUp: false, isDisabledDown: false },\r\n            { id: 4, name: '4th todo', isDisabledUp: false, isDisabledDown: false },\r\n            { id: 5, name: '5th todo', isDisabledUp: false, isDisabledDown: true }\r\n        ],\r\n        todo: ' ',\r\n        confirmCounter: {},\r\n    };\r\n//\r\n// //1.\r\n//     componentWillMount() {\r\n//         console.log('willMount');\r\n//     }\r\n//\r\n//     componentWillUnmount() {\r\n//         //unplug actions\r\n//         console.log('willUnMount');\r\n//     }\r\n//\r\n// //3.\r\n//     componentDidMount() {\r\n//         //fetch\r\n//         console.log('DidMount');\r\n//     }\r\n\r\n    addTodo = () => {\r\n        // this.setState({count: this.state.count + 1, counterName: 'Second'}, () => {\r\n        //     console.log('state callback');\r\n        console.log('state=', this.state);\r\n        this.setState((prev) => ({\r\n            list: [\r\n                ...prev.list.slice(0, prev.list.length - 1),\r\n                {...prev.list[prev.list.length - 1], isDisabledDown: false},\r\n                {\r\n                    id: Math.floor(Math.random() * 1000),\r\n                    name: this.state.todo,\r\n                    isDisabledUp: false,\r\n                    isDisabledDown: true\r\n                }],\r\n            todo: ' ',\r\n        }));\r\n    };\r\n\r\n    inputTodoChange = (e) => {\r\n        return (\r\n            this.setState({todo: e.target.value})\r\n        )\r\n    };\r\n\r\n    confirmRemove = (item) => {\r\n        this.setState({confirmCounter: item});\r\n    };\r\n\r\n    removeConfirmedListItem = () => {\r\n        const newList = this.state.list.filter(el => el.id !== this.state.confirmCounter.id);\r\n        this.setState({list: newList, confirmCounter: {}});\r\n    };\r\n\r\n    confirmRemoveCancel = () => {\r\n        this.setState({confirmCounter: {}});\r\n    };\r\n\r\n    todoListItemUp = (item) => {\r\n        const idx = this.state.list.findIndex(el => el.id === item.id);\r\n        const len = this.state.list.length;\r\n        console.log('index= ', idx);\r\n        let newList;\r\n        if (idx === 1) {\r\n            newList = [{...this.state.list[1], isDisabledUp: true},\r\n                {...this.state.list[0], isDisabledUp: false},\r\n                ...this.state.list.slice(2)];\r\n        } else if (idx === len - 1) {\r\n            newList = [...this.state.list.slice(0, idx - 1),\r\n                {...this.state.list[len - 1], isDisabledDown: false},\r\n                {...this.state.list[len - 2], isDisabledDown: true}];\r\n        } else {\r\n            newList = [...this.state.list.slice(0, idx - 1),\r\n                this.state.list[idx],\r\n                this.state.list[idx - 1],\r\n                ...this.state.list.slice(idx + 1)];\r\n        }\r\n\r\n        return (this.setState({list: newList}))\r\n    };\r\n\r\n    todoListItemDown= (item) => {\r\n        const idx = this.state.list.findIndex(el => el.id === item.id);\r\n        const len = this.state.list.length;\r\n        console.log('index= ', idx);\r\n        console.log('len= ', len);\r\n        console.log('list= ', this.state.list);\r\n        let newList;\r\n        if (idx === 0) {\r\n            newList = [{...this.state.list[1], isDisabledUp: true},\r\n                {...this.state.list[0], isDisabledUp: false},\r\n                ...this.state.list.slice(2)];\r\n        } else if (idx === len - 2) {\r\n            newList = [...this.state.list.slice(0, idx),\r\n                {...this.state.list[len - 1], isDisabledDown: false},\r\n                {...this.state.list[len - 2], isDisabledDown: true}];\r\n        } else {\r\n            newList = [\r\n                ...this.state.list.slice(0, idx),\r\n                this.state.list[idx+1],\r\n                this.state.list[idx],\r\n                ...this.state.list.slice(idx + 2)\r\n            ];\r\n        }\r\n\r\n        return (this.setState({list: newList}))\r\n    };\r\n    render() {\r\n        console.log('Render');\r\n\r\n        return (\r\n\r\n            <div>\r\n                <div className='card-body'>\r\n                    <div className='row align-items-center'>\r\n                        <input className='col- border-info'\r\n                               type='text'\r\n                               value={this.state.todo}\r\n                               onChange={this.inputTodoChange}\r\n                               placeholder='Todo name'/>\r\n                        <button type='button' className='btn btn-primary btn-sm'\r\n                                onClick={this.addTodo}> Add todo\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <ul className=\"list-group \">\r\n                    {\r\n                        this.state.list.map(el =>\r\n                            <TodoListItem\r\n                                key={el.id}\r\n                                item={el}\r\n                                remove={this.confirmRemove}\r\n                                todoListItemUp={this.todoListItemUp}\r\n                                todoListItemDown={this.todoListItemDown}\r\n                            />)\r\n                    }\r\n                </ul>\r\n\r\n                <ConfirmationDelete\r\n                    name={this.state.confirmCounter.name}\r\n                    onSuccess={this.removeConfirmedListItem}\r\n                    onCancel={this.confirmRemoveCancel}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport App from \"./components/app/App\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}