{"version":3,"sources":["components/delete-confirmation-modal/confirmation-delete.js","components/todo-list-item-movements/todo-list-item-movements.js","components/todo-list-item/todo-list-item.js","components/app/App.js","serviceWorker.js","index.js"],"names":["ConfirmationDelete","deleteButtonClick","props","onSuccess","cancelButtonClick","onCancel","this","name","Modal","isOpen","Boolean","toggle","ModalHeader","ModalBody","ModalFooter","Button","color","onClick","Component","TodoListItemMovements","item","todoListItemUp","className","disabled","isDisabledUp","type","isDisabledDown","TodoListItem","remove","key","id","App","state","list","todo","confirmCounter","addTodo","console","log","setState","prev","slice","length","Math","floor","random","inputTodoChange","e","target","value","confirmRemove","removeConfirmedListItem","newList","filter","el","confirmRemoveCancel","idx","findIndex","len","onChange","placeholder","map","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3d59e5cc.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Button, Modal, ModalHeader, ModalBody, ModalFooter} from 'reactstrap';\n\nexport default class ConfirmationDelete extends Component {\n\n    deleteButtonClick = () => {\n        this.props.onSuccess();\n    };\n\n    cancelButtonClick = () => {\n        this.props.onCancel();\n    };\n\n    render() {\n        const {name, onCancel} = this.props;\n\n        return (\n            <div>\n                <Modal isOpen={Boolean(name)} toggle={onCancel}>\n                    <ModalHeader>Delete confirmation</ModalHeader>\n                    <ModalBody>\n                        The <strong>{name}</strong> task will be deleted\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button color=\"danger\"\n                                onClick={this.deleteButtonClick}\n                        >Delete</Button>{' '}\n                        <Button color=\"secondary\"\n                                onClick={this.cancelButtonClick}\n                        >Cancel</Button>\n                    </ModalFooter>\n                </Modal>\n            </div>\n        );\n    }\n}","import React from \"react\";\r\n\r\nconst TodoListItemMovements = ({item, todoListItemUp}) => {\r\n\r\n    return (\r\n        <div className=\"btn-group-vertical\">\r\n            <button onClick={() => {\r\n                todoListItemUp(item)\r\n            }}\r\n                    disabled={item.isDisabledUp}\r\n                    type=\"button\" className='btn btn-primary btn-sm mb-1 align-content-center'>Up\r\n            </button>\r\n            <button disabled={item.isDisabledDown}\r\n                type=\"button\" className='btn  btn-dark btn-sm mb-1 align-content-center align'>Down</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoListItemMovements;\r\n","import React from \"react\";\r\nimport TodoListItemMovements from \"../todo-list-item-movements/todo-list-item-movements\";\r\n\r\nconst TodoListItem = ({item, remove, todoListItemUp}) => {\r\n\r\n    return (\r\n            <li key={item.id} className='list-group-item'>\r\n                <TodoListItemMovements item = {item} todoListItemUp={todoListItemUp}/>\r\n                {item.name}\r\n                <button type=\"button\" className='btn btn-danger btn-sm' onClick={() => {remove(item)}}>Delete</button>\r\n            </li>\r\n    );\r\n};\r\n\r\nexport default TodoListItem;\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport ConfirmationDelete from \"../delete-confirmation-modal/confirmation-delete\";\nimport TodoListItem from \"../todo-list-item/todo-list-item\";\n\nclass App extends Component {\n    //lifecycle methods\n//0.\n//     constructor() {\n//         super();\n//         this.state = {count: 4, counterName: \"First\"};\n//         console.log('constructor');\n//     }\n\n    state = {\n        list: [\n            {\n                id: 1, name: 'First todo', isDisabledUp: true, isDisabledDown: false\n            },\n            {\n                id: 2, name: 'Second todo', isDisabledUp: false, isDisabledDown: false\n            },\n            {\n                id: 3, name: 'Third todo', isDisabledUp: false, isDisabledDown: true\n            }\n        ],\n        todo: ' ',\n        confirmCounter: {},\n    };\n//\n// //1.\n//     componentWillMount() {\n//         console.log('willMount');\n//     }\n//\n//     componentWillUnmount() {\n//         //unplug actions\n//         console.log('willUnMount');\n//     }\n//\n// //3.\n//     componentDidMount() {\n//         //fetch\n//         console.log('DidMount');\n//     }\n\n    addTodo = () => {\n        // this.setState({count: this.state.count + 1, counterName: 'Second'}, () => {\n        //     console.log('state callback');\n        console.log('state=', this.state);\n        this.setState((prev) => ({\n            list: [\n                ...prev.list.slice(0, prev.list.length - 1),\n                {...prev.list[prev.list.length - 1], isDisabledDown: false},\n                {\n                    id: Math.floor(Math.random() * 1000),\n                    name: this.state.todo,\n                    isDisabledUp: false,\n                    isDisabledDown: true\n                }],\n            todo: ' ',\n        }));\n    };\n\n    inputTodoChange = (e) => {\n        return (\n            this.setState({todo: e.target.value})\n        )\n    };\n\n    confirmRemove = (item) => {\n        this.setState({confirmCounter: item});\n    };\n\n    removeConfirmedListItem = () => {\n        const newList = this.state.list.filter(el => el.id !== this.state.confirmCounter.id);\n        this.setState({list: newList, confirmCounter: {}});\n    };\n\n    confirmRemoveCancel = () => {\n        this.setState({confirmCounter: {}});\n    };\n\n    todoListItemUp = (item) => {\n        const idx = this.state.list.findIndex(el => el.id === item.id);\n        const len = this.state.list.length;\n        console.log('index= ', idx);\n        let newList;\n        if (idx === 1) {\n            newList = [{...this.state.list[1], isDisabledUp: true},\n                {...this.state.list[0], isDisabledUp: false},\n                ...this.state.list.slice(2)];\n        } else if (idx === len - 1) {\n            newList = [...this.state.list.slice(0, idx - 1),\n                {...this.state.list[len - 1], isDisabledDown: false},\n                {...this.state.list[len - 2], isDisabledDown: true}];\n        } else {\n            newList = [...this.state.list.slice(0, idx - 1),\n                this.state.list[idx],\n                this.state.list[idx - 1],\n                ...this.state.list.slice(idx + 1)];\n        }\n\n        return (this.setState({list: newList}))\n    };\n\n\n    render() {\n        console.log('Render');\n\n        return (\n\n            <div>\n                <div className='card-body'>\n                    <div className='row align-items-center'>\n                        <input className='col- border-info'\n                               type='text'\n                               value={this.state.todo}\n                               onChange={this.inputTodoChange}\n                               placeholder='Todo name'/>\n                        <button type='button' className='btn btn-primary btn-sm'\n                                onClick={this.addTodo}> Add todo\n                        </button>\n                    </div>\n                </div>\n                <ul className=\"list-group \">\n                    {\n                        this.state.list.map(el =>\n                            <TodoListItem\n                                key={el.id}\n                                item={el}\n                                remove={this.confirmRemove}\n                                todoListItemUp={this.todoListItemUp}\n                            />)\n                    }\n                </ul>\n\n                <ConfirmationDelete\n                    name={this.state.confirmCounter.name}\n                    onSuccess={this.removeConfirmedListItem}\n                    onCancel={this.confirmRemoveCancel}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from \"./components/app/App\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}